AWSTemplateFormatVersion: "2010-09-09"
Description: "Securing Access to External Package Repositories Using AWS CodeSuite Automation"
Metadata:
  LICENSE: >-
    Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

    Permission is hereby granted, free of charge, to any person obtaining a copy of this
    software and associated documentation files (the "Software"), to deal in the Software
    without restriction, including without limitation the rights to use, copy, modify,
    merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
    INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
    PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Git Repository Settings
        Parameters:
          - Branch
          - GitUrl
          - GitWebHookIpAddress
      - Label:
          default: Git Access Settings
        Parameters:
          - SecretsManagerArnForSSHPrivateKey
          - SourceActionProvider
          - SourceActionVersion
      - Label:
          default: Network Configuration
        Parameters:
          - RepoCloneLambdaVpc
          - RepoCloneLambdaSubnet
      - Label:
          default: AWS Resource Configuration
        Parameters:
          - CodePipelineName
          - LambdaCodeS3Bucket
          - LambdaCodeS3Key
    ParameterLabels:
      Branch:
        default: Git Branch
      GitUrl:
        default: Git SSH URL
      GitWebHookIpAddress:
        default: Git Webhook IP Address Range
      SecretsManagerArnForSSHPrivateKey:
        default: SSH Private Key Secrets Manager ARN 
      SourceActionProvider:
        default: Custom Source Action Provider
      SourceActionVersion:
        default: Custom Source Action Version
      RepoCloneLambdaVpc:
        default: VPC-Attached CodeBuild and Lambda VPC
      RepoCloneLambdaSubnet:
        default: VPC-Attached CodeBuild and Lambda Subnets
      CodePipelineName:
        default: CodePipeline Name
      LambdaCodeS3Bucket:
        default: S3 Bucket Containing Git Clone Lambda
      LambdaCodeS3Key:
        default: S3 Key for Git Clone Lambda

Parameters:
  Branch:
    Description: Git branch to clone.
    Type: String
    Default: 'Lex'
  GitUrl:
    Description: Git SSH URL.
    Type: String
    Default: 'git@github.com:kyleblocksom/AWS.git'
  GitWebHookIpAddress:
    Description: Git WebHook source IP address (https://api.github.com/meta).
    Type: String
    Default: '140.82.112.0/20'
  SecretsManagerArnForSSHPrivateKey:
    Description: Git Repo SSH Private Key stored in AWS Secrets Manager.
    Type: String
    NoEcho: 'true'
    Default: 'arn:aws:secretsmanager:us-east-1:239380694500:secret:external-repo-access-png2wb'
  SourceActionProvider:
    Description: CodePipeline custom source action name.
    Type: String
    Default: 'CustomGitSource'
  SourceActionVersion:
    Description: CodePipeline custom source action version.
    Type: String
    Default: '1'
  RepoCloneLambdaVpc:
    Description: VPC for Git clone Lambda and CodeBuild deployment.
    Type: 'AWS::EC2::VPC::Id'
    Default: 'vpc-0119dc6b76a6e56de'
  RepoCloneLambdaSubnet:
    Description: Private subnet(s) for Git clone Lambda and CodeBuild deployment.
    Type: 'List<AWS::EC2::Subnet::Id>'
    Default: 'subnet-0ffec4eee0db69311, subnet-0a47543730ca266a0'
  CodePipelineName:
    Description: Name for CodePipeline.
    Type: String
    Default: external-repo-pipeline
  LambdaCodeS3Bucket:
    Description: S3 Bucket Containing Git Clone Lambda
    Type: String
    Default: repo-clone-lambda-239380694500
  LambdaCodeS3Key:
    Description: S3 Key for Git Clone Lambda
    Type: String
    Default: 'repo-clone-lambda.zip'

Resources:
  RepoCloneCodeBuild:
      Type: AWS::CodeBuild::Project
      Properties:
        VpcConfig:
          VpcId: !Ref RepoCloneLambdaVpc
          SecurityGroupIds: [!Ref RepoCloneSecurityGroup]
          Subnets: !Ref RepoCloneLambdaSubnet
        Artifacts:
          Type: NO_ARTIFACTS
        Environment:
          Image: aws/codebuild/standard:2.0
          Type: LINUX_CONTAINER
          ComputeType: BUILD_GENERAL1_SMALL
        QueuedTimeoutInMinutes: 60
        ServiceRole: !GetAtt CodeSuiteRole.Arn
        Source:
          BuildSpec: |
              version: 0.2
              env:
                exported-variables:
                  - GIT_COMMIT_ID
                  - GIT_COMMIT_MSG
              phases:
                install:
                    runtime-versions:
                        python: 3.7
                    # commands:
                    # - pip3 install boto3
                build:
                    commands:
                    - echo "=======================Start-Deployment============================="
                    - echo "Setting temporary AWS CLI profile using CodePipeline job poll response"
                    - PROFILE='temp-profile'
                    - aws configure set aws_access_key_id $CodePipelineArtifactAccessKey --profile $PROFILE
                    - aws configure set aws_secret_access_key $CodePipelineArtifactSecretAccessKey --profile $PROFILE
                    - aws configure set aws_session_token $CodePipelineArtifactSessionToken --profile $PROFILE
                    - echo "Getting the SSH Private Key"
                    - aws secretsmanager get-secret-value --secret-id $SSHSecretKeyName --query 'SecretString' --output text >> ~/.ssh/id_rsa
                    # - aws s3api get-object --bucket $KeyBucket --key $KeyObject ~/.ssh/id_rsa
                    - ls ~/
                    - echo "Setting SSH config profile"
                    - |
                      cat > ~/.ssh/config <<EOF
                      Host *
                        AddKeysToAgent yes
                        StrictHostKeyChecking no
                        IdentityFile ~/.ssh/id_rsa
                      EOF
                    - chmod 600 ~/.ssh/id_rsa
                    - echo "Cloning the repository $GitUrl on branch $Branch"
                    - git clone --single-branch --depth=1 --branch $Branch $GitUrl .
                    - ls
                    - echo "Zipping the checked out contents"
                    - zip -r $CodePipelineArtifactBucketObjectKey ./ -x '*.git*'
                    - mv $CodePipelineArtifactBucketObjectKey.zip $CodePipelineArtifactBucketObjectKey
                    - ls -alh
                    - echo "Put the zipped and KMS encrypted Object to Originating Pipelines Artifact Store"
                    - aws s3 cp $CodePipelineArtifactBucketObjectKey s3://$CodePipelineArtifactBucket/$CodePipelineArtifactBucketPath/$CodePipelineArtifactBucketObjectKey --sse aws:kms --sse-kms-key-id $CodePipelineArtifactKMSKeyId --profile $PROFILE
                    - export GIT_COMMIT_ID=$(git rev-parse --short HEAD)
                    - echo $GIT_COMMIT_ID
                    - COMMIT_MSG=$(git log --pretty='format:%Creset%s' --no-merges -1)
                    - export GIT_COMMIT_MSG="${COMMIT_MSG}"
                    - echo $GIT_COMMIT_MSG
                    - echo "=======================End-Deployment============================="
          Type: NO_SOURCE
        TimeoutInMinutes: 14

  CodeSuiteRole:
    Type: "AWS::IAM::Role"
    Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Principal:
                Service: 
                 - 'codebuild.amazonaws.com'
                 - 'codepipeline.amazonaws.com'
            Action:
                - "sts:AssumeRole"
        Path: "/"
        ManagedPolicyArns:
          - !Ref CodeSuiteEndpointPolicy

  CodeSuitePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
        Description: Policy with base permissions for CodeBuild
        Path: /
        Roles:
          - !Ref CodeSuiteRole
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: "Allow"
            Action:
                - "logs:CreateLogGroup"
                - "logs:PutLogEvents"
                - "logs:CreateLogStream"
            Resource:
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*"
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:GetObjectVersion'
              - 's3:GetBucketVersioning'
              - 's3:PutObject'
              - "s3:GetBucketAcl"
              - "s3:GetBucketLocation"
            Resource:
              - !GetAtt ArtifactStoreBucket.Arn
              - !Sub "${ArtifactStoreBucket.Arn}/*"
          - Effect: Allow
            Action:
              - 'iam:PassRole'
            Resource:
              - !GetAtt CodeSuiteRole.Arn
          - Effect: Allow
            Action:
             - 'codebuild:BatchGetBuilds'
             - 'codebuild:StartBuild'
            Resource: '*'
          - Effect: Allow
            Action:
             - 'kms:Encrypt'
             - 'kms:Decrypt'
             - 'kms:ReEncrypt*'
             - 'kms:GenerateDataKey*'
             - 'kms:DescribeKey'
            Resource:
             - !GetAtt KMSKey.Arn
          - Effect: Allow  #For allowing CodeBuild to Access Secrets Manager to retrieve Private SSH key. If a custom KMS key is used, please add the ARN in the Resource section
            Action:
             - 'kms:Encrypt'
             - 'kms:Decrypt'
             - 'kms:ReEncrypt*'
             - 'kms:GenerateDataKey*'
             - 'kms:DescribeKey'
            Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/secretsmanager"
          - Effect: Allow
            Action:
             - 'secretsmanager:GetSecretValue'
            Resource: !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*"

  CodeSuiteEndpointPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
        Description: Policy with permissions for codebuild to work with endpoints
        Path: /
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeDhcpOptions'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DescribeSubnets'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:DescribeVpcs'
              Resource: '*'
            - Effect: Allow
              Action:
                  - 'ec2:CreateNetworkInterfacePermission'
              Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*'
              Condition:
                StringEquals: {"ec2:Subnet": [{
                      "Fn::Join": ["", ["arn:aws:ec2:", {"Ref" : "AWS::Region" },":", {"Ref" : "AWS::AccountId"}, ":subnet/", { "Fn::Select" : [ "0", {"Ref": "RepoCloneLambdaSubnet"} ] }
                        ]
                      ]
                    },
                    {
                      "Fn::Join": ["", ["arn:aws:ec2:", {"Ref" : "AWS::Region" },":", {"Ref" : "AWS::AccountId"}, ":subnet/", { "Fn::Select" : [ "1", {"Ref": "RepoCloneLambdaSubnet"} ] }
                        ]
                      ]
                    }],
                  "ec2:AuthorizedService": "codebuild.amazonaws.com"}

  CustomSourceAction:
    Type: 'AWS::CodePipeline::CustomActionType'
    Properties:
        Category: 'Source'
        Settings:
            EntityUrlTemplate: 'https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html'
            ExecutionUrlTemplate: 'https://docs.aws.amazon.com/codepipeline/latest/userguide/actions-create-custom-action.html'
        ConfigurationProperties:
            - Name: Branch
              Required: true
              Key: false
              Secret: false
              Queryable: false
              Description: 'Git branch to pull.'
              Type: String
            - Name: GitUrl
              Required: true
              Key: false
              Secret: false
              Queryable: false
              Description: 'SSH git clone URL.'
              Type: String
            - Name: PipelineName
              Required: true
              Key: false
              Secret: false
              Queryable: true
              Description: 'Name of the CodePipeline'
              Type: String
            - Name: SSHSecretKeyName
              Required: true
              Key: false
              Secret: false
              Queryable: false
              Description: 'Name of the Secret for SSH private Key'
              Type: String
        InputArtifactDetails:
            MaximumCount: 0
            MinimumCount: 0
        OutputArtifactDetails:
            MaximumCount: 1
            MinimumCount: 1
        Provider: !Ref SourceActionProvider
        Version: !Ref SourceActionVersion

  CodePipelineCustomActionFunction:
    Type: AWS::Lambda::Function
    Properties:
        Handler: repo-clone-lambda.lambda_handler
        VpcConfig:
          SecurityGroupIds: [!Ref RepoCloneSecurityGroup]
          SubnetIds: !Ref RepoCloneLambdaSubnet
        Environment:
            Variables:
                RepoCloneCodeBuild: !Ref RepoCloneCodeBuild
        Role: !GetAtt 'LambdaExecutionRole.Arn'
        Runtime: python3.7
        Timeout: 900
        Code:
          S3Bucket: !Ref LambdaCodeS3Bucket
          S3Key: !Ref LambdaCodeS3Key

  LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
          ManagedPolicyArns:
            - !Ref CodeSuiteEndpointPolicy
          AssumeRolePolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Principal:
                      Service:
                        - lambda.amazonaws.com
                  Action:
                    - sts:AssumeRole
          Path: /
          Policies:
            - PolicyName: root
              PolicyDocument:
                  Version: '2012-10-17'
                  Statement:
                    - Effect: Allow
                      Action:
                        - logs:CreateLogGroup
                        - "logs:CreateLogStream"
                        - "logs:PutLogEvents"
                      Resource:
                        - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
                    - Effect: Allow
                      Action:
                        - codepipeline:PollForJobs
                        - codepipeline:AcknowledgeJob
                        - codepipeline:GetJobDetails
                        - codepipeline:PutJobSuccessResult
                        - codepipeline:PutJobFailureResult
                        - codepipeline:StopPipelineExecution
                      Resource: '*'
                    - Effect: Allow
                      Action:
                        - codebuild:StartBuild
                        - codebuild:BatchGetBuilds
                      Resource:
                        - !GetAtt RepoCloneCodeBuild.Arn

  CodePipelineCustomActionFunctionPermissions:
      Type: AWS::Lambda::Permission
      Properties:
          Action: 'lambda:InvokeFunction'
          FunctionName: !GetAtt CodePipelineCustomActionFunction.Arn
          Principal: 'events.amazonaws.com'

  CodePipelineCustomActionTrigger:
      Type: "AWS::Events::Rule"
      Properties:
          State: "ENABLED"
          Description: !Sub "Handles the ${SourceActionProvider} custom provider for CodePipeline."
          EventPattern: !Sub |
              {
                  "source": ["aws.codepipeline"],
                  "detail-type": ["CodePipeline Action Execution State Change"],
                  "detail": {
                      "type": {
                          "provider": ["${SourceActionProvider}"],
                          "category": ["Source"],
                          "owner": ["Custom"]
                      },
                      "state": ["STARTED"]
                  }
              }
          Targets:
            - Arn: !GetAtt CodePipelineCustomActionFunction.Arn
              Id: "CodePipelineCustomActionTrigger"

  RepoCloneSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for the lambda function performing git pulls.'
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          IpProtocol: 'tcp'
          FromPort: '0'
          ToPort: '65535'
      VpcId: !Ref RepoCloneLambdaVpc

  KMSKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: 'git CodePipeline integration, bucket to store ssh keys'
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Sid: Allow access for Key Administrators
            Effect: Allow
            Principal:
              AWS:
                - !Join
                  - ''
                  - - 'arn:aws:iam::'
                    - !Ref 'AWS::AccountId'
                    - ':root'
            Action:
              - 'kms:Create*'
              - 'kms:Describe*'
              - 'kms:Enable*'
              - 'kms:List*'
              - 'kms:Put*'
              - 'kms:Update*'
              - 'kms:Revoke*'
              - 'kms:Disable*'
              - 'kms:Get*'
              - 'kms:Delete*'
              - 'kms:ScheduleKeyDeletion'
              - 'kms:CancelKeyDeletion'
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS:
                - !GetAtt CodeSuiteRole.Arn
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:DescribeKey'
            Resource: '*'

  CodeBuild:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/java:openjdk-8
        Type: LINUX_CONTAINER
      ServiceRole: !Ref CodeSuiteRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
              version: 0.2
              phases:
                install:
                    runtime-versions:
                        python: 3.7
                    # commands:
                    # - pip3 install boto3
                build:
                    commands:
                    - ls -al

  Pipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStoreBucket
        EncryptionKey:
          Id: !GetAtt KMSKey.Arn
          Type: KMS
      Name: !Ref CodePipelineName
      RoleArn: !GetAtt CodeSuiteRole.Arn
      Stages:
        - Name: 'Source'
          Actions:
            - Name: 'Source'
              ActionTypeId:
                Category: 'Source'
                Owner: 'Custom'
                Version: !Ref SourceActionVersion
                Provider: !Ref SourceActionProvider
              OutputArtifacts:
                - Name: MyApp
              Configuration:
                Branch: !Ref Branch
                GitUrl: !Ref GitUrl
                PipelineName: !Ref CodePipelineName
                SSHSecretKeyName: !Ref SecretsManagerArnForSSHPrivateKey
              RunOrder: 1
        - Name: 'Build'
          Actions:
            - Name: 'CodeBuild'
              ActionTypeId:
                Category: 'Build'
                Owner: 'AWS'
                Version: '1'
                Provider: 'CodeBuild'
              InputArtifacts:
                - Name: MyApp
              OutputArtifacts:
                - Name: MyAppBuilt
              Configuration:
                ProjectName: !Ref CodeBuild
              RunOrder: 1

  PipelineWebhook:
    Type: "AWS::CodePipeline::Webhook"
    Properties:
      TargetPipeline: !Ref Pipeline
      TargetPipelineVersion: 1
      TargetAction: Source
      Filters:
        - JsonPath: '$.ref'
          MatchEquals: 'refs/heads/{Branch}'
      Authentication: IP
      AuthenticationConfiguration:
        AllowedIPRange: !Ref GitWebHookIpAddress
      RegisterWithThirdParty: false

  ArtifactStoreBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      VersioningConfiguration:
        Status: Enabled

Outputs:
  CodePipelineWebHookUrl:
    Value: !GetAtt PipelineWebhook.Url
